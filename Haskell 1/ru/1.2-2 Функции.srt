1
00:00:00,210 --> 00:00:02,380
Текущий урок посвящен
понятию функции

2
00:00:03,190 --> 00:00:04,980
одкано прежде чем
говорить о функциях

3
00:00:05,410 --> 00:00:11,153
мы поговорим про модель вычислений,
принятых в функциональных языках.

4
00:00:11,960 --> 00:00:14,032
Мы сравним модель вычисления
функциональных языков

5
00:00:14,057 --> 00:00:16,477
с моделью вычисления
для императивных языков.

6
00:00:17,230 --> 00:00:20,270
В императивных языках, программы –
это последовательность инструкций

7
00:00:21,040 --> 00:00:23,500
подразумевается что имеется
некоторый вычеслитель

8
00:00:23,950 --> 00:00:29,267
который принимает эти инструкции
и последовательно исполняет их

9
00:00:29,580 --> 00:00:33,611
Результаты исполнения таких инструкций
сохраняются в ячейках памяти

10
00:00:34,950 --> 00:00:39,270
Последующие инструкции могут обращаться
к этим результатам вычислений

11
00:00:39,460 --> 00:00:42,030
да доступа их ячейкам
памяти на чтение и запись

12
00:00:42,170 --> 00:00:45,389
в императивных языках водятся
фундаментальное понятие

13
00:00:45,414 --> 00:00:48,394
именованных ячеек, которые
называются переменные.

14
00:00:49,150 --> 00:00:57,234
Переменные в императивных языках это
ячейки, в которых данные могут изменятся

15
00:00:58,570 --> 00:01:00,303
в процессе выполнения программы.

16
00:01:00,820 --> 00:01:02,570
В функциональных языках
ситуация другая.

17
00:01:03,380 --> 00:01:07,541
В функциональных языках, таких как
Haskell, модель вычислений следующая:

18
00:01:08,020 --> 00:01:11,200
программа представляет
собой некоторое выражение

19
00:01:11,460 --> 00:01:16,233
а вычисление, выполнение программы

20
00:01:16,510 --> 00:01:20,185
заключается в последовательно
редукциях этих выражений

21
00:01:20,210 --> 00:01:23,294
до состояния когда такие
редукции дальше уже невозможны.

22
00:01:24,090 --> 00:01:27,940
Получившиеся в результате
<i>отредукцированное</i> выражение

23
00:01:28,530 --> 00:01:30,903
представляет собой
результат работы программы.

24
00:01:31,460 --> 00:01:37,254
Посмотрим на последовательность редукции
на простом, знакомом нам из школы примере

25
00:01:37,570 --> 00:01:43,890
Вот перед нами мы видим
арифметическое выражение которое

26
00:01:44,080 --> 00:01:47,534
записано в первой строке, а каждая
следующая строка, это результат

27
00:01:47,559 --> 00:01:51,703
последовательных вычислений этих выражений,
последовательного редукцирования

28
00:01:51,960 --> 00:01:57,240
сначала 4 умножается на 3, мы получаем
значение 12, потом 5 складывается с 12

29
00:01:57,240 --> 00:01:59,760
и на следующем шаге редукции
мы получаем число 17

30
00:01:59,890 --> 00:02:02,645
и наконец 17 возводиться в
квадрат, и мы получаем результат

31
00:02:02,670 --> 00:02:07,715
289 который уже дальше
не может быть вычислен.

32
00:02:07,740 --> 00:02:11,933
Результат 289 является ответом
на наш вопрос, чему же

33
00:02:11,958 --> 00:02:15,260
равняется значению выражения, которое
у нас нас было в первой строчке.

34
00:02:15,720 --> 00:02:19,254
Таким образом вычеслитель в
этой ситуации, это некоторая

35
00:02:19,279 --> 00:02:22,240
довольно простая внешняя
программа, которая умеет

36
00:02:22,240 --> 00:02:24,977
выполнять редукцию, в данном
случае под редукцией мы

37
00:02:25,002 --> 00:02:27,729
понимаем выполнение
арифметических выражений.

38
00:02:28,580 --> 00:02:31,607
В дальнейшем мы будем
пользоваться значком

39
00:02:31,632 --> 00:02:36,766
стрелочка с волнистой
внутренностью (~>)

40
00:02:37,000 --> 00:02:42,742
да того, чтобы а описывать один шаг
редукции по каким нибудь правилам.

